# -*- coding: utf-8 -*-
"""Naive Bayes, Support Vector Machines, Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/uyenle848/Business-analytics/blob/main/Naive_Bayes%2C_Support_Vector_Machines%2C_Linear_Regression.ipynb

# Module 6 Exercises

## The breast cancer Wisconsin dataset (classification problem)

Let us build two predictive models on the following dataset:

(http://archive.ics.uci.edu/ml/datasets/breast+cancer+wisconsin+%28original%29)
"""

# load the breast cancer Wisconsin dataset
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
type(cancer)

"""Bunch is a Dictionary-like object in Scikit-Learn. The interesting attributes are: 
- ‘data’, the data to learn, 
- ‘target’, the classification labels, 
-‘target_names’, the meaning of the labels, 
- ‘feature_names’, the meaning of the features, and 
-‘DESCR’, the full description of the dataset, 
- ‘filename’, the physical location of breast cancer csv dataset (added in version 0.20).
"""

list(cancer.feature_names)

list(cancer.target_names)

"""## Question 1"""

# split the data into training and test data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, test_size=0.25, random_state=0)

# Let us apply Feature Scaling to our data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Use GaussianNB method of Naive Bayes class to build a prediction model on training data
# Obtain the accuracy of your model predictions on test data
# Create a confusion matrix as part of your output

# ANSWER:

1. import your model
2. instantiate your model
3. fit your model to training data
4. evaluate your trained model on test data

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)
y_model = model.predict(X_test)

y_model

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_model)

"""## Question 2"""

# split the data into training and test data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, test_size=0.25, random_state=0)

# Let us apply Feature Scaling to our data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Use Support vector Machines (SVM) class in Scikit-Learn to build a prediction model on training data
# Obtain the accuracy of your model predictions on test data
# Create a confusion matrix as part of your output

# ANSWER:
from sklearn import svm 
clf = svm.SVC()
clf.fit(X_train, y_train)
y_model2 = clf.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_model2)

from sklearn.metrics import confusion_matrix
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

mat = confusion_matrix(y_test, y_model2)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,
            xticklabels=cancer.target_names,
            yticklabels=cancer.target_names)
plt.xlabel('true label')
plt.ylabel('predicted label');

"""## Question 3

## Diabetes dataset

https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html

The dataset contains 10 features (that have already been mean centered and scaled) and a target value: a measure of disease progression one year after baseline.
"""

# load the dataset
import pandas as pd
from sklearn.datasets import load_diabetes
X, y = load_diabetes(return_X_y=True)
X = pd.DataFrame(X)
y = pd.DataFrame(y)
print(X.head())
print(y.head())

# setting up training set and test set 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# fit a linear regression model on training data and determine training set score and test set score
# ANSWER:
from sklearn.linear_model import LinearRegression
lr = LinearRegression().fit(X_train, y_train)

print("Training set score: {:.2f}".format(lr.score(X_train, y_train)))
print("Test set score: {:.2f}".format(lr.score(X_test, y_test)))
print("Number of features used under linear regression:", np.sum(lr.coef_ !=0))